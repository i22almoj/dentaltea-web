security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Entity\User: 
            id: 'App\Security\Hasher\MD5PasswordHasher'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
        app_provider:
            entity:
                class: App\Entity\User
                property: email
        api_provider:
            entity:
                class: App\Entity\User
                property: email          
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: users_in_memory
            user_checker: App\Security\UserChecker
            remember_me:
                secret: "%kernel.secret%"
                lifetime: 31536000 # 365 d√≠as en segundos
                path: /
                domain:   ~ # El valor predeterminado es el dominio actual de $_SERVER
            form_login:
                login_path: login
                check_path: login
                default_target_path: home
                provider: app_provider
            logout:
                path: /salir
                target: /acceder
                
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/acceder$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/registro$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/recuperar-contrasena$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/recuperar-contrasena/$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/cron$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/, roles: [ROLE_ADMIN, ROLE_USER] }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
